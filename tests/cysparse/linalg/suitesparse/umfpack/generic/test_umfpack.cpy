#!/usr/bin/env python

"""
This file tests basic umfpack operations.

We test **all** types and the symmetric and general cases.

     If this is a python script (.py), it has been automatically generated by the 'generate_code.py' script.

"""
from cysparse.sparse.ll_mat import *
from cysparse.types.cysparse_types import *
from cysparse.linalg.umfpack import NewUmfpackContext

import numpy as np

import unittest

import sys

def is_equal(A, B, eps=1e-12):
    if A.nrow != B.nrow or A.ncol != B.ncol:
        return False

    for i in xrange(A.nrow):
        for j in xrange(A.ncol):
            if abs(A[i, j] - B[i, j]) > eps:
                return False

    return True

########################################################################################################################
# Tests
########################################################################################################################
class CySparseUmfpackBaseTestCase(unittest.TestCase):
    def setUp(self):
        pass

class CySparseUmfpackLUTestCase(CySparseUmfpackBaseTestCase):
    """
    Verify equality ``L * U = P * R * A * Q``.
    """
    def setUp(self):
        self.nbr_of_elements = 36
        self.size = 6

{% for index_type in umfpack_index_list %}
  {% set outerloop = loop %}
  {% for element_type in umfpack_type_list %}
        self.l_@outerloop.index@_@loop.index@ = NewArrowheadLLSparseMatrix(size=self.size, itype=@index_type|type2enum@, dtype=@element_type|type2enum@, row_wise=False)

        self.context_@outerloop.index@_@loop.index@ = NewUmfpackContext(self.l_@outerloop.index@_@loop.index@)
        self.context_@outerloop.index@_@loop.index@.set_verbosity(0)

  {% endfor %}
{% endfor %}

{% for index_type in umfpack_index_list %}
  {% set outerloop = loop %}
  {% for element_type in umfpack_type_list %}
    def test_simple_equality_one_by_one_@outerloop.index@_@loop.index@(self):
        (L, U, P, Q, D, do_recip, R) = self.context_@outerloop.index@_@loop.index@.get_LU()

        P_mat = NewPermutationLLSparseMatrix(P=P, size=self.size, dtype=@element_type|type2enum@, itype=@index_type|type2enum@)
        Q_mat = NewPermutationLLSparseMatrix(P=Q, size=self.size, dtype=@element_type|type2enum@, itype=@index_type|type2enum@)

        if do_recip:
            R_mat = NewLLSparseMatrix(size=self.size, dtype=@element_type|type2enum@, itype=@index_type|type2enum@)
            for i in xrange(self.size):
                R_mat[i, i] = R[i]
        else:
            R_mat = NewLLSparseMatrix(size=self.size, dtype=@element_type|type2enum@, itype=@index_type|type2enum@)
            for i in xrange(self.size):
                R_mat[i, i] = 1/R[i]

        self.failUnless(is_equal(L * U, P_mat * R_mat * self.l_@outerloop.index@_@loop.index@ * Q_mat))

  {% endfor %}
{% endfor %}

if __name__ == '__main__':
    unittest.main()