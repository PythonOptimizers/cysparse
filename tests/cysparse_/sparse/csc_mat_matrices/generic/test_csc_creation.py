#!/usr/bin/env python

"""
This file tests the creation of :class:`CSCSparseMatrix` matrices from :class:`LLSparesMatrix` matrices.

We test **all** types and the symmetric and general cases.
We only use the real parts of complex numbers.


     If this is a python script (.py), it has been automatically generated by the 'generate_code.py' script.

"""
from cysparse.sparse.ll_mat import *
from cysparse.types.cysparse_types import *
import numpy as np

import unittest

import sys

########################################################################################################################
# Helpers
########################################################################################################################
def construct_sym_sparse_matrix(A, n, nbr_elements):
    for i in xrange(nbr_elements):
        k = i % n
        p = (i % 2 + 1) % n
        if k >= p:
            A[k, p] = i / 3
        else:
            A[p, k] = i / 3

def construct_sparse_matrix(A, n, nbr_elements):
    for i in xrange(nbr_elements):
        k = i % n
        p = (i % 2 + 1) % n
        A[p, k] = i / 3

########################################################################################################################
# Tests
########################################################################################################################
class CySparseCSCCreationBaseTestCase(unittest.TestCase):
    def setUp(self):
        pass

class CySparseCSCCreationFromLLSparseMatrixTestCase(CySparseCSCCreationBaseTestCase):
    def setUp(self):
        self.nbr_of_elements = 10
        self.size = 100

  
  
        self.l_1_1 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=INT32_T)
        construct_sparse_matrix(self.l_1_1, self.size, self.nbr_of_elements)

        self.l_1_1_csc = self.l_1_1.to_csc()
  
        self.l_1_2 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=INT64_T)
        construct_sparse_matrix(self.l_1_2, self.size, self.nbr_of_elements)

        self.l_1_2_csc = self.l_1_2.to_csc()
  
        self.l_1_3 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=FLOAT32_T)
        construct_sparse_matrix(self.l_1_3, self.size, self.nbr_of_elements)

        self.l_1_3_csc = self.l_1_3.to_csc()
  
        self.l_1_4 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=FLOAT64_T)
        construct_sparse_matrix(self.l_1_4, self.size, self.nbr_of_elements)

        self.l_1_4_csc = self.l_1_4.to_csc()
  
        self.l_1_5 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=FLOAT128_T)
        construct_sparse_matrix(self.l_1_5, self.size, self.nbr_of_elements)

        self.l_1_5_csc = self.l_1_5.to_csc()
  
        self.l_1_6 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX64_T)
        construct_sparse_matrix(self.l_1_6, self.size, self.nbr_of_elements)

        self.l_1_6_csc = self.l_1_6.to_csc()
  
        self.l_1_7 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX128_T)
        construct_sparse_matrix(self.l_1_7, self.size, self.nbr_of_elements)

        self.l_1_7_csc = self.l_1_7.to_csc()
  
        self.l_1_8 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX256_T)
        construct_sparse_matrix(self.l_1_8, self.size, self.nbr_of_elements)

        self.l_1_8_csc = self.l_1_8.to_csc()
  

  
  
        self.l_2_1 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=INT32_T)
        construct_sparse_matrix(self.l_2_1, self.size, self.nbr_of_elements)

        self.l_2_1_csc = self.l_2_1.to_csc()
  
        self.l_2_2 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=INT64_T)
        construct_sparse_matrix(self.l_2_2, self.size, self.nbr_of_elements)

        self.l_2_2_csc = self.l_2_2.to_csc()
  
        self.l_2_3 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=FLOAT32_T)
        construct_sparse_matrix(self.l_2_3, self.size, self.nbr_of_elements)

        self.l_2_3_csc = self.l_2_3.to_csc()
  
        self.l_2_4 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=FLOAT64_T)
        construct_sparse_matrix(self.l_2_4, self.size, self.nbr_of_elements)

        self.l_2_4_csc = self.l_2_4.to_csc()
  
        self.l_2_5 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=FLOAT128_T)
        construct_sparse_matrix(self.l_2_5, self.size, self.nbr_of_elements)

        self.l_2_5_csc = self.l_2_5.to_csc()
  
        self.l_2_6 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX64_T)
        construct_sparse_matrix(self.l_2_6, self.size, self.nbr_of_elements)

        self.l_2_6_csc = self.l_2_6.to_csc()
  
        self.l_2_7 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX128_T)
        construct_sparse_matrix(self.l_2_7, self.size, self.nbr_of_elements)

        self.l_2_7_csc = self.l_2_7.to_csc()
  
        self.l_2_8 = NewLLSparseMatrix(size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX256_T)
        construct_sparse_matrix(self.l_2_8, self.size, self.nbr_of_elements)

        self.l_2_8_csc = self.l_2_8.to_csc()
  


    def test_elements_one_by_one(self):
        """
        We test if both :class:`LLSparseMatrix` and corresponding :class:`CSCSparseMatrix` are equal, element by elmeent.
        """

  
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_1[i, j] == self.l_1_1_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_2[i, j] == self.l_1_2_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_3[i, j] == self.l_1_3_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_4[i, j] == self.l_1_4_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_5[i, j] == self.l_1_5_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_6[i, j] == self.l_1_6_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_7[i, j] == self.l_1_7_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_8[i, j] == self.l_1_8_csc[i, j])
  

  
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_1[i, j] == self.l_2_1_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_2[i, j] == self.l_2_2_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_3[i, j] == self.l_2_3_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_4[i, j] == self.l_2_4_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_5[i, j] == self.l_2_5_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_6[i, j] == self.l_2_6_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_7[i, j] == self.l_2_7_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_8[i, j] == self.l_2_8_csc[i, j])
  


    def test_symmetric_attribute(self):
        """
        We test if the ``is_symmetric`` attribute is the same for both matrices.
        """

  
  
        self.failUnless(self.l_1_1.is_symmetric == self.l_1_1_csc.is_symmetric == False)
  
        self.failUnless(self.l_1_2.is_symmetric == self.l_1_2_csc.is_symmetric == False)
  
        self.failUnless(self.l_1_3.is_symmetric == self.l_1_3_csc.is_symmetric == False)
  
        self.failUnless(self.l_1_4.is_symmetric == self.l_1_4_csc.is_symmetric == False)
  
        self.failUnless(self.l_1_5.is_symmetric == self.l_1_5_csc.is_symmetric == False)
  
        self.failUnless(self.l_1_6.is_symmetric == self.l_1_6_csc.is_symmetric == False)
  
        self.failUnless(self.l_1_7.is_symmetric == self.l_1_7_csc.is_symmetric == False)
  
        self.failUnless(self.l_1_8.is_symmetric == self.l_1_8_csc.is_symmetric == False)
  

  
  
        self.failUnless(self.l_2_1.is_symmetric == self.l_2_1_csc.is_symmetric == False)
  
        self.failUnless(self.l_2_2.is_symmetric == self.l_2_2_csc.is_symmetric == False)
  
        self.failUnless(self.l_2_3.is_symmetric == self.l_2_3_csc.is_symmetric == False)
  
        self.failUnless(self.l_2_4.is_symmetric == self.l_2_4_csc.is_symmetric == False)
  
        self.failUnless(self.l_2_5.is_symmetric == self.l_2_5_csc.is_symmetric == False)
  
        self.failUnless(self.l_2_6.is_symmetric == self.l_2_6_csc.is_symmetric == False)
  
        self.failUnless(self.l_2_7.is_symmetric == self.l_2_7_csc.is_symmetric == False)
  
        self.failUnless(self.l_2_8.is_symmetric == self.l_2_8_csc.is_symmetric == False)
  



class CySparseCSCCreationFromSymmetricLLSparseMatrixTestCase(CySparseCSCCreationBaseTestCase):
    def setUp(self):
        self.nbr_of_elements = 10
        self.size = 100

  
  
        self.l_1_1 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=INT32_T)
        construct_sym_sparse_matrix(self.l_1_1, self.size, self.nbr_of_elements)

        self.l_1_1_csc = self.l_1_1.to_csc()
  
        self.l_1_2 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=INT64_T)
        construct_sym_sparse_matrix(self.l_1_2, self.size, self.nbr_of_elements)

        self.l_1_2_csc = self.l_1_2.to_csc()
  
        self.l_1_3 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=FLOAT32_T)
        construct_sym_sparse_matrix(self.l_1_3, self.size, self.nbr_of_elements)

        self.l_1_3_csc = self.l_1_3.to_csc()
  
        self.l_1_4 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=FLOAT64_T)
        construct_sym_sparse_matrix(self.l_1_4, self.size, self.nbr_of_elements)

        self.l_1_4_csc = self.l_1_4.to_csc()
  
        self.l_1_5 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=FLOAT128_T)
        construct_sym_sparse_matrix(self.l_1_5, self.size, self.nbr_of_elements)

        self.l_1_5_csc = self.l_1_5.to_csc()
  
        self.l_1_6 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX64_T)
        construct_sym_sparse_matrix(self.l_1_6, self.size, self.nbr_of_elements)

        self.l_1_6_csc = self.l_1_6.to_csc()
  
        self.l_1_7 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX128_T)
        construct_sym_sparse_matrix(self.l_1_7, self.size, self.nbr_of_elements)

        self.l_1_7_csc = self.l_1_7.to_csc()
  
        self.l_1_8 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX256_T)
        construct_sym_sparse_matrix(self.l_1_8, self.size, self.nbr_of_elements)

        self.l_1_8_csc = self.l_1_8.to_csc()
  

  
  
        self.l_2_1 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=INT32_T)
        construct_sym_sparse_matrix(self.l_2_1, self.size, self.nbr_of_elements)

        self.l_2_1_csc = self.l_2_1.to_csc()
  
        self.l_2_2 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=INT64_T)
        construct_sym_sparse_matrix(self.l_2_2, self.size, self.nbr_of_elements)

        self.l_2_2_csc = self.l_2_2.to_csc()
  
        self.l_2_3 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=FLOAT32_T)
        construct_sym_sparse_matrix(self.l_2_3, self.size, self.nbr_of_elements)

        self.l_2_3_csc = self.l_2_3.to_csc()
  
        self.l_2_4 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=FLOAT64_T)
        construct_sym_sparse_matrix(self.l_2_4, self.size, self.nbr_of_elements)

        self.l_2_4_csc = self.l_2_4.to_csc()
  
        self.l_2_5 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=FLOAT128_T)
        construct_sym_sparse_matrix(self.l_2_5, self.size, self.nbr_of_elements)

        self.l_2_5_csc = self.l_2_5.to_csc()
  
        self.l_2_6 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX64_T)
        construct_sym_sparse_matrix(self.l_2_6, self.size, self.nbr_of_elements)

        self.l_2_6_csc = self.l_2_6.to_csc()
  
        self.l_2_7 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX128_T)
        construct_sym_sparse_matrix(self.l_2_7, self.size, self.nbr_of_elements)

        self.l_2_7_csc = self.l_2_7.to_csc()
  
        self.l_2_8 = NewLLSparseMatrix(is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX256_T)
        construct_sym_sparse_matrix(self.l_2_8, self.size, self.nbr_of_elements)

        self.l_2_8_csc = self.l_2_8.to_csc()
  


    def test_elements_one_by_one(self):
        """
        We test if both :class:`LLSparseMatrix` and corresponding :class:`CSCSparseMatrix` are equal, element by elmeent.
        """

  
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_1[i, j] == self.l_1_1_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_2[i, j] == self.l_1_2_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_3[i, j] == self.l_1_3_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_4[i, j] == self.l_1_4_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_5[i, j] == self.l_1_5_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_6[i, j] == self.l_1_6_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_7[i, j] == self.l_1_7_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_1_8[i, j] == self.l_1_8_csc[i, j])
  

  
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_1[i, j] == self.l_2_1_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_2[i, j] == self.l_2_2_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_3[i, j] == self.l_2_3_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_4[i, j] == self.l_2_4_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_5[i, j] == self.l_2_5_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_6[i, j] == self.l_2_6_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_7[i, j] == self.l_2_7_csc[i, j])
  
        for i in xrange(self.size):
            for j in xrange(self.size):
                self.failUnless(self.l_2_8[i, j] == self.l_2_8_csc[i, j])
  


    def test_symmetric_attribute(self):
        """
        We test if the ``is_symmetric`` attribute is the same for both matrices.
        """

  
  
        self.failUnless(self.l_1_1.is_symmetric == self.l_1_1_csc.is_symmetric == True)
  
        self.failUnless(self.l_1_2.is_symmetric == self.l_1_2_csc.is_symmetric == True)
  
        self.failUnless(self.l_1_3.is_symmetric == self.l_1_3_csc.is_symmetric == True)
  
        self.failUnless(self.l_1_4.is_symmetric == self.l_1_4_csc.is_symmetric == True)
  
        self.failUnless(self.l_1_5.is_symmetric == self.l_1_5_csc.is_symmetric == True)
  
        self.failUnless(self.l_1_6.is_symmetric == self.l_1_6_csc.is_symmetric == True)
  
        self.failUnless(self.l_1_7.is_symmetric == self.l_1_7_csc.is_symmetric == True)
  
        self.failUnless(self.l_1_8.is_symmetric == self.l_1_8_csc.is_symmetric == True)
  

  
  
        self.failUnless(self.l_2_1.is_symmetric == self.l_2_1_csc.is_symmetric == True)
  
        self.failUnless(self.l_2_2.is_symmetric == self.l_2_2_csc.is_symmetric == True)
  
        self.failUnless(self.l_2_3.is_symmetric == self.l_2_3_csc.is_symmetric == True)
  
        self.failUnless(self.l_2_4.is_symmetric == self.l_2_4_csc.is_symmetric == True)
  
        self.failUnless(self.l_2_5.is_symmetric == self.l_2_5_csc.is_symmetric == True)
  
        self.failUnless(self.l_2_6.is_symmetric == self.l_2_6_csc.is_symmetric == True)
  
        self.failUnless(self.l_2_7.is_symmetric == self.l_2_7_csc.is_symmetric == True)
  
        self.failUnless(self.l_2_8.is_symmetric == self.l_2_8_csc.is_symmetric == True)
  



if __name__ == '__main__':
    unittest.main()