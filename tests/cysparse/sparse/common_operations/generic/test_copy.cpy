#!/usr/bin/env python

"""
This file tests basic matrix copy.

We test **all** types and the symmetric and general cases.


     If this is a python script (.py), it has been automatically generated by the 'generate_code.py' script.

"""
from cysparse.sparse.ll_mat import *
from cysparse.types.cysparse_types import *
import numpy as np

import unittest

import sys


def is_equal(A, B):
    if A.nrow != B.nrow or A.ncol != B.ncol:
        return False

    for i in xrange(A.nrow):
        for j in xrange(A.ncol):
            if A[i, j] != B[i, j]:
                return False

    return True


########################################################################################################################
# Tests
########################################################################################################################
class CySparseCommonOperationsMatrixCopyBaseTestCase(unittest.TestCase):
    def setUp(self):
        pass

class CySparseCommonOperationsMatrixCopyTestCase(CySparseCommonOperationsMatrixCopyBaseTestCase):
    """

    """
    def setUp(self):
        self.nbr_of_elements = 10
        self.nrow = 4
        self.ncol = 6

{% for index_type in index_list %}
  {% set outerloop = loop %}
  {% for element_type in type_list %}
        self.l_@outerloop.index@_@loop.index@ = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=@index_type|type2enum@, dtype=@element_type|type2enum@, row_wise=False)

        self.l_@outerloop.index@_@loop.index@_csc = self.l_@outerloop.index@_@loop.index@.to_csc()
        self.l_@outerloop.index@_@loop.index@_csr = self.l_@outerloop.index@_@loop.index@.to_csr()
  {% endfor %}
{% endfor %}


    def test_simple_equality_one_by_one(self):
{% for index_type in index_list %}
  {% set outerloop = loop %}
  {% for element_type in type_list %}
        self.failUnless(is_equal(self.l_@outerloop.index@_@loop.index@_csc.copy(), self.l_@outerloop.index@_@loop.index@_csr))
        self.failUnless(is_equal(self.l_@outerloop.index@_@loop.index@_csr.copy(), self.l_@outerloop.index@_@loop.index@_csc))
        self.failUnless(is_equal(self.l_@outerloop.index@_@loop.index@.copy(), self.l_@outerloop.index@_@loop.index@))
  {% endfor %}
{% endfor %}

    def test_if_real_copy(self):
        {% for index_type in index_list %}
  {% set outerloop = loop %}
  {% for element_type in type_list %}
        csc_copy = self.l_@outerloop.index@_@loop.index@_csc.copy()
        csr_copy = self.l_@outerloop.index@_@loop.index@_csr.copy()
        self.failUnless(csc_copy != self.l_@outerloop.index@_@loop.index@_csc)
        self.failUnless(csr_copy != self.l_@outerloop.index@_@loop.index@_csr)
  {% endfor %}
{% endfor %}


class CySparseCommonOperationsSymMatrixCopyTestCase(CySparseCommonOperationsMatrixCopyBaseTestCase):
    """

    """
    def setUp(self):
        self.nbr_of_elements = 10
        self.nrow = 4
        self.ncol = 6

{% for index_type in index_list %}
  {% set outerloop = loop %}
  {% for element_type in type_list %}
        self.l_@outerloop.index@_@loop.index@ = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.nrow, itype=@index_type|type2enum@, dtype=@element_type|type2enum@, is_symmetric=True, row_wise=False)

        self.l_@outerloop.index@_@loop.index@_csc = self.l_@outerloop.index@_@loop.index@.to_csc()
        self.l_@outerloop.index@_@loop.index@_csr = self.l_@outerloop.index@_@loop.index@.to_csr()
  {% endfor %}
{% endfor %}


    def test_simple_equality_one_by_one(self):
{% for index_type in index_list %}
  {% set outerloop = loop %}
  {% for element_type in type_list %}
        self.failUnless(is_equal(self.l_@outerloop.index@_@loop.index@_csc.copy(), self.l_@outerloop.index@_@loop.index@_csr))
        self.failUnless(is_equal(self.l_@outerloop.index@_@loop.index@_csr.copy(), self.l_@outerloop.index@_@loop.index@_csc))
        self.failUnless(is_equal(self.l_@outerloop.index@_@loop.index@.copy(), self.l_@outerloop.index@_@loop.index@))
  {% endfor %}
{% endfor %}

    def test_if_real_copy(self):
        {% for index_type in index_list %}
  {% set outerloop = loop %}
  {% for element_type in type_list %}
        csc_copy = self.l_@outerloop.index@_@loop.index@_csc.copy()
        csr_copy = self.l_@outerloop.index@_@loop.index@_csr.copy()
        self.failUnless(csc_copy != self.l_@outerloop.index@_@loop.index@_csc)
        self.failUnless(csr_copy != self.l_@outerloop.index@_@loop.index@_csr)
  {% endfor %}
{% endfor %}

if __name__ == '__main__':
    unittest.main()