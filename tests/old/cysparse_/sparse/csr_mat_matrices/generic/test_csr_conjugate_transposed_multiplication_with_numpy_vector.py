#!/usr/bin/env python

"""
This file tests the **conjugate transposed** multiplication of an :class:`CSRSparseMatrix` matrix with a :program:`NumPy` vector.

We test **all** **complex** types and the symmetric and general cases. We also test strided vectors.


     If this is a python script (.py), it has been automatically generated by the 'generate_code.py' script.

"""
from cysparse.sparse.ll_mat import *
from cysparse.types.cysparse_types import *
import numpy as np

import unittest

import sys

########################################################################################################################
# Tests
########################################################################################################################
class CySparseCSRConjugateTransposedMultiplicationWithANumpyVectorBaseTestCase(unittest.TestCase):
    def setUp(self):
        pass

class CySparseCSRConjugateTransposedMultiplicationWithANumpyVectorTestCase(CySparseCSRConjugateTransposedMultiplicationWithANumpyVectorBaseTestCase):
    """
    Basic case: ``y = A^h * x`` with ``A`` **non** symmetric and ``x`` and ``y`` without strides.
    """
    def setUp(self):
        self.nbr_of_elements = 10
        self.nrow = 4
        self.ncol = 6


  
  
        #self.l_1_1 = NewLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX64_T)
        #construct_sparse_matrix(self.l_1_1, self.nrow, self.ncol, self.nbr_of_elements)

        self.l_1_1 = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=INT32_T, dtype=COMPLEX64_T, row_wise=False)

        self.l_1_1_csr = self.l_1_1.to_csr()
  
        #self.l_1_2 = NewLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX128_T)
        #construct_sparse_matrix(self.l_1_2, self.nrow, self.ncol, self.nbr_of_elements)

        self.l_1_2 = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=INT32_T, dtype=COMPLEX128_T, row_wise=False)

        self.l_1_2_csr = self.l_1_2.to_csr()
  
        #self.l_1_3 = NewLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX256_T)
        #construct_sparse_matrix(self.l_1_3, self.nrow, self.ncol, self.nbr_of_elements)

        self.l_1_3 = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=INT32_T, dtype=COMPLEX256_T, row_wise=False)

        self.l_1_3_csr = self.l_1_3.to_csr()
  

  
  
        #self.l_2_1 = NewLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX64_T)
        #construct_sparse_matrix(self.l_2_1, self.nrow, self.ncol, self.nbr_of_elements)

        self.l_2_1 = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=INT64_T, dtype=COMPLEX64_T, row_wise=False)

        self.l_2_1_csr = self.l_2_1.to_csr()
  
        #self.l_2_2 = NewLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX128_T)
        #construct_sparse_matrix(self.l_2_2, self.nrow, self.ncol, self.nbr_of_elements)

        self.l_2_2 = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=INT64_T, dtype=COMPLEX128_T, row_wise=False)

        self.l_2_2_csr = self.l_2_2.to_csr()
  
        #self.l_2_3 = NewLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX256_T)
        #construct_sparse_matrix(self.l_2_3, self.nrow, self.ncol, self.nbr_of_elements)

        self.l_2_3 = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=INT64_T, dtype=COMPLEX256_T, row_wise=False)

        self.l_2_3_csr = self.l_2_3.to_csr()
  



        self.x_COMPLEX64_t = np.empty(self.nrow, dtype=np.complex64)
        self.x_COMPLEX64_t.fill(1+2j)

        self.x_COMPLEX128_t = np.empty(self.nrow, dtype=np.complex128)
        self.x_COMPLEX128_t.fill(1+2j)

        self.x_COMPLEX256_t = np.empty(self.nrow, dtype=np.complex256)
        self.x_COMPLEX256_t.fill(1+2j)


    def test_simple_multiplication_one_by_one(self):

  
  
        l_y = self.l_1_1.matvec_htransp(self.x_COMPLEX64_t)
        csr_y = self.l_1_1_csr.matvec_htransp(self.x_COMPLEX64_t)
        for i in xrange(self.ncol):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_1_2.matvec_htransp(self.x_COMPLEX128_t)
        csr_y = self.l_1_2_csr.matvec_htransp(self.x_COMPLEX128_t)
        for i in xrange(self.ncol):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_1_3.matvec_htransp(self.x_COMPLEX256_t)
        csr_y = self.l_1_3_csr.matvec_htransp(self.x_COMPLEX256_t)
        for i in xrange(self.ncol):
            self.failUnless(l_y[i] == csr_y[i])
  

  
  
        l_y = self.l_2_1.matvec_htransp(self.x_COMPLEX64_t)
        csr_y = self.l_2_1_csr.matvec_htransp(self.x_COMPLEX64_t)
        for i in xrange(self.ncol):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_2_2.matvec_htransp(self.x_COMPLEX128_t)
        csr_y = self.l_2_2_csr.matvec_htransp(self.x_COMPLEX128_t)
        for i in xrange(self.ncol):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_2_3.matvec_htransp(self.x_COMPLEX256_t)
        csr_y = self.l_2_3_csr.matvec_htransp(self.x_COMPLEX256_t)
        for i in xrange(self.ncol):
            self.failUnless(l_y[i] == csr_y[i])
  



class CySparseSymCSRConjugateTransposedMultiplicationWithANumpyVectorTestCase(CySparseCSRConjugateTransposedMultiplicationWithANumpyVectorBaseTestCase):
    """
    Basic case: ``y = A^h * x`` with ``A`` symmetric and ``x`` and ``y`` without strides.
    """
    def setUp(self):
        self.nbr_of_elements = 10
        self.size = 100

  
  
        #self.l_1_1 = NewLLSparseMatrix(__is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX64_T)
        #construct_sym_sparse_matrix(self.l_1_1, self.size, self.nbr_of_elements)

        self.l_1_1 = NewLinearFillLLSparseMatrix(size=self.size, itype=INT32_T, dtype=COMPLEX64_T, row_wise=False, is_symmetric=True)

        self.l_1_1_csr = self.l_1_1.to_csr()
  
        #self.l_1_2 = NewLLSparseMatrix(__is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX128_T)
        #construct_sym_sparse_matrix(self.l_1_2, self.size, self.nbr_of_elements)

        self.l_1_2 = NewLinearFillLLSparseMatrix(size=self.size, itype=INT32_T, dtype=COMPLEX128_T, row_wise=False, is_symmetric=True)

        self.l_1_2_csr = self.l_1_2.to_csr()
  
        #self.l_1_3 = NewLLSparseMatrix(__is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX256_T)
        #construct_sym_sparse_matrix(self.l_1_3, self.size, self.nbr_of_elements)

        self.l_1_3 = NewLinearFillLLSparseMatrix(size=self.size, itype=INT32_T, dtype=COMPLEX256_T, row_wise=False, is_symmetric=True)

        self.l_1_3_csr = self.l_1_3.to_csr()
  

  
  
        #self.l_2_1 = NewLLSparseMatrix(__is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX64_T)
        #construct_sym_sparse_matrix(self.l_2_1, self.size, self.nbr_of_elements)

        self.l_2_1 = NewLinearFillLLSparseMatrix(size=self.size, itype=INT64_T, dtype=COMPLEX64_T, row_wise=False, is_symmetric=True)

        self.l_2_1_csr = self.l_2_1.to_csr()
  
        #self.l_2_2 = NewLLSparseMatrix(__is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX128_T)
        #construct_sym_sparse_matrix(self.l_2_2, self.size, self.nbr_of_elements)

        self.l_2_2 = NewLinearFillLLSparseMatrix(size=self.size, itype=INT64_T, dtype=COMPLEX128_T, row_wise=False, is_symmetric=True)

        self.l_2_2_csr = self.l_2_2.to_csr()
  
        #self.l_2_3 = NewLLSparseMatrix(__is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX256_T)
        #construct_sym_sparse_matrix(self.l_2_3, self.size, self.nbr_of_elements)

        self.l_2_3 = NewLinearFillLLSparseMatrix(size=self.size, itype=INT64_T, dtype=COMPLEX256_T, row_wise=False, is_symmetric=True)

        self.l_2_3_csr = self.l_2_3.to_csr()
  



        self.x_COMPLEX64_t = np.empty(self.size, dtype=np.complex64)
        self.x_COMPLEX64_t.fill(1+2j)

        self.x_COMPLEX128_t = np.empty(self.size, dtype=np.complex128)
        self.x_COMPLEX128_t.fill(1+2j)

        self.x_COMPLEX256_t = np.empty(self.size, dtype=np.complex256)
        self.x_COMPLEX256_t.fill(1+2j)


    def test_simple_multiplication_one_by_one(self):

  
  
        l_y = self.l_1_1.matvec_htransp(self.x_COMPLEX64_t)
        csr_y = self.l_1_1_csr.matvec_htransp(self.x_COMPLEX64_t)
        for i in xrange(self.size):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_1_2.matvec_htransp(self.x_COMPLEX128_t)
        csr_y = self.l_1_2_csr.matvec_htransp(self.x_COMPLEX128_t)
        for i in xrange(self.size):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_1_3.matvec_htransp(self.x_COMPLEX256_t)
        csr_y = self.l_1_3_csr.matvec_htransp(self.x_COMPLEX256_t)
        for i in xrange(self.size):
            self.failUnless(l_y[i] == csr_y[i])
  

  
  
        l_y = self.l_2_1.matvec_htransp(self.x_COMPLEX64_t)
        csr_y = self.l_2_1_csr.matvec_htransp(self.x_COMPLEX64_t)
        for i in xrange(self.size):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_2_2.matvec_htransp(self.x_COMPLEX128_t)
        csr_y = self.l_2_2_csr.matvec_htransp(self.x_COMPLEX128_t)
        for i in xrange(self.size):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_2_3.matvec_htransp(self.x_COMPLEX256_t)
        csr_y = self.l_2_3_csr.matvec_htransp(self.x_COMPLEX256_t)
        for i in xrange(self.size):
            self.failUnless(l_y[i] == csr_y[i])
  



class CySparseCSRConjugateTransposedMultiplicationWithAStridedNumpyVectorTestCase(CySparseCSRConjugateTransposedMultiplicationWithANumpyVectorBaseTestCase):
    """
    Basic case: ``y = A^h * x`` with ``A`` **non** symmetric and ``x`` **with** strides.
    """
    def setUp(self):
        self.nbr_of_elements = 10
        self.nrow = 80
        self.ncol = 100

        self.stride_factor = 10


  
  
        #self.l_1_1 = NewLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX64_T)
        #construct_sparse_matrix(self.l_1_1, self.nrow, self.ncol, self.nbr_of_elements)

        self.l_1_1 = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=INT32_T, dtype=COMPLEX64_T, row_wise=False)

        self.l_1_1_csr = self.l_1_1.to_csr()
  
        #self.l_1_2 = NewLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX128_T)
        #construct_sparse_matrix(self.l_1_2, self.nrow, self.ncol, self.nbr_of_elements)

        self.l_1_2 = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=INT32_T, dtype=COMPLEX128_T, row_wise=False)

        self.l_1_2_csr = self.l_1_2.to_csr()
  
        #self.l_1_3 = NewLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX256_T)
        #construct_sparse_matrix(self.l_1_3, self.nrow, self.ncol, self.nbr_of_elements)

        self.l_1_3 = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=INT32_T, dtype=COMPLEX256_T, row_wise=False)

        self.l_1_3_csr = self.l_1_3.to_csr()
  

  
  
        #self.l_2_1 = NewLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX64_T)
        #construct_sparse_matrix(self.l_2_1, self.nrow, self.ncol, self.nbr_of_elements)

        self.l_2_1 = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=INT64_T, dtype=COMPLEX64_T, row_wise=False)

        self.l_2_1_csr = self.l_2_1.to_csr()
  
        #self.l_2_2 = NewLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX128_T)
        #construct_sparse_matrix(self.l_2_2, self.nrow, self.ncol, self.nbr_of_elements)

        self.l_2_2 = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=INT64_T, dtype=COMPLEX128_T, row_wise=False)

        self.l_2_2_csr = self.l_2_2.to_csr()
  
        #self.l_2_3 = NewLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX256_T)
        #construct_sparse_matrix(self.l_2_3, self.nrow, self.ncol, self.nbr_of_elements)

        self.l_2_3 = NewLinearFillLLSparseMatrix(nrow=self.nrow, ncol=self.ncol, itype=INT64_T, dtype=COMPLEX256_T, row_wise=False)

        self.l_2_3_csr = self.l_2_3.to_csr()
  



        self.x_COMPLEX64_t = np.empty(self.nrow, dtype=np.complex64)
        self.x_COMPLEX64_t.fill(1+2j)

        self.x_strided_COMPLEX64_t = np.empty(self.nrow * self.stride_factor, dtype=np.complex64)
        self.x_strided_COMPLEX64_t.fill(2)

        for i in xrange(self.nrow):
            self.x_strided_COMPLEX64_t[i * self.stride_factor] = self.x_COMPLEX64_t[i]

        self.x_COMPLEX128_t = np.empty(self.nrow, dtype=np.complex128)
        self.x_COMPLEX128_t.fill(1+2j)

        self.x_strided_COMPLEX128_t = np.empty(self.nrow * self.stride_factor, dtype=np.complex128)
        self.x_strided_COMPLEX128_t.fill(2)

        for i in xrange(self.nrow):
            self.x_strided_COMPLEX128_t[i * self.stride_factor] = self.x_COMPLEX128_t[i]

        self.x_COMPLEX256_t = np.empty(self.nrow, dtype=np.complex256)
        self.x_COMPLEX256_t.fill(1+2j)

        self.x_strided_COMPLEX256_t = np.empty(self.nrow * self.stride_factor, dtype=np.complex256)
        self.x_strided_COMPLEX256_t.fill(2)

        for i in xrange(self.nrow):
            self.x_strided_COMPLEX256_t[i * self.stride_factor] = self.x_COMPLEX256_t[i]


    def test_simple_multiplication_one_by_one(self):

  
  
        l_y = self.l_1_1.matvec_htransp(self.x_COMPLEX64_t)
        csr_y = self.l_1_1_csr.matvec_htransp(self.x_strided_COMPLEX64_t[::self.stride_factor])
        for i in xrange(self.ncol):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_1_2.matvec_htransp(self.x_COMPLEX128_t)
        csr_y = self.l_1_2_csr.matvec_htransp(self.x_strided_COMPLEX128_t[::self.stride_factor])
        for i in xrange(self.ncol):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_1_3.matvec_htransp(self.x_COMPLEX256_t)
        csr_y = self.l_1_3_csr.matvec_htransp(self.x_strided_COMPLEX256_t[::self.stride_factor])
        for i in xrange(self.ncol):
            self.failUnless(l_y[i] == csr_y[i])
  

  
  
        l_y = self.l_2_1.matvec_htransp(self.x_COMPLEX64_t)
        csr_y = self.l_2_1_csr.matvec_htransp(self.x_strided_COMPLEX64_t[::self.stride_factor])
        for i in xrange(self.ncol):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_2_2.matvec_htransp(self.x_COMPLEX128_t)
        csr_y = self.l_2_2_csr.matvec_htransp(self.x_strided_COMPLEX128_t[::self.stride_factor])
        for i in xrange(self.ncol):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_2_3.matvec_htransp(self.x_COMPLEX256_t)
        csr_y = self.l_2_3_csr.matvec_htransp(self.x_strided_COMPLEX256_t[::self.stride_factor])
        for i in xrange(self.ncol):
            self.failUnless(l_y[i] == csr_y[i])
  



class CySparseSymCSRConjugateTransposedMultiplicationWithAStridedNumpyVectorTestCase(CySparseCSRConjugateTransposedMultiplicationWithANumpyVectorBaseTestCase):
    """
    Basic case: ``y = A^h * x`` with ``A`` **symmetric** and ``x`` **with** strides.
    """
    def setUp(self):
        self.nbr_of_elements = 10
        self.size = 100

        self.stride_factor = 10


  
  
        #self.l_1_1 = NewLLSparseMatrix(__is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX64_T)
        #construct_sym_sparse_matrix(self.l_1_1, self.size, self.nbr_of_elements)

        self.l_1_1 = NewLinearFillLLSparseMatrix(size=self.size, itype=INT32_T, dtype=COMPLEX64_T, row_wise=False, is_symmetric=True)

        self.l_1_1_csr = self.l_1_1.to_csr()
  
        #self.l_1_2 = NewLLSparseMatrix(__is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX128_T)
        #construct_sym_sparse_matrix(self.l_1_2, self.size, self.nbr_of_elements)

        self.l_1_2 = NewLinearFillLLSparseMatrix(size=self.size, itype=INT32_T, dtype=COMPLEX128_T, row_wise=False, is_symmetric=True)

        self.l_1_2_csr = self.l_1_2.to_csr()
  
        #self.l_1_3 = NewLLSparseMatrix(__is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT32_T, dtype=COMPLEX256_T)
        #construct_sym_sparse_matrix(self.l_1_3, self.size, self.nbr_of_elements)

        self.l_1_3 = NewLinearFillLLSparseMatrix(size=self.size, itype=INT32_T, dtype=COMPLEX256_T, row_wise=False, is_symmetric=True)

        self.l_1_3_csr = self.l_1_3.to_csr()
  

  
  
        #self.l_2_1 = NewLLSparseMatrix(__is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX64_T)
        #construct_sym_sparse_matrix(self.l_2_1, self.size, self.nbr_of_elements)

        self.l_2_1 = NewLinearFillLLSparseMatrix(size=self.size, itype=INT64_T, dtype=COMPLEX64_T, row_wise=False, is_symmetric=True)

        self.l_2_1_csr = self.l_2_1.to_csr()
  
        #self.l_2_2 = NewLLSparseMatrix(__is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX128_T)
        #construct_sym_sparse_matrix(self.l_2_2, self.size, self.nbr_of_elements)

        self.l_2_2 = NewLinearFillLLSparseMatrix(size=self.size, itype=INT64_T, dtype=COMPLEX128_T, row_wise=False, is_symmetric=True)

        self.l_2_2_csr = self.l_2_2.to_csr()
  
        #self.l_2_3 = NewLLSparseMatrix(__is_symmetric=True, size=self.size, size_hint=self.nbr_of_elements, itype=INT64_T, dtype=COMPLEX256_T)
        #construct_sym_sparse_matrix(self.l_2_3, self.size, self.nbr_of_elements)

        self.l_2_3 = NewLinearFillLLSparseMatrix(size=self.size, itype=INT64_T, dtype=COMPLEX256_T, row_wise=False, is_symmetric=True)

        self.l_2_3_csr = self.l_2_3.to_csr()
  



        self.x_COMPLEX64_t = np.empty(self.size, dtype=np.complex64)
        self.x_COMPLEX64_t.fill(1+2j)

        self.x_strided_COMPLEX64_t = np.empty(self.size * self.stride_factor, dtype=np.complex64)
        self.x_strided_COMPLEX64_t.fill(2)

        for i in xrange(self.size):
            self.x_strided_COMPLEX64_t[i * self.stride_factor] = self.x_COMPLEX64_t[i]

        self.x_COMPLEX128_t = np.empty(self.size, dtype=np.complex128)
        self.x_COMPLEX128_t.fill(1+2j)

        self.x_strided_COMPLEX128_t = np.empty(self.size * self.stride_factor, dtype=np.complex128)
        self.x_strided_COMPLEX128_t.fill(2)

        for i in xrange(self.size):
            self.x_strided_COMPLEX128_t[i * self.stride_factor] = self.x_COMPLEX128_t[i]

        self.x_COMPLEX256_t = np.empty(self.size, dtype=np.complex256)
        self.x_COMPLEX256_t.fill(1+2j)

        self.x_strided_COMPLEX256_t = np.empty(self.size * self.stride_factor, dtype=np.complex256)
        self.x_strided_COMPLEX256_t.fill(2)

        for i in xrange(self.size):
            self.x_strided_COMPLEX256_t[i * self.stride_factor] = self.x_COMPLEX256_t[i]


    def test_simple_multiplication_one_by_one(self):

  
  
        l_y = self.l_1_1.matvec_htransp(self.x_COMPLEX64_t)
        csr_y = self.l_1_1_csr.matvec_htransp(self.x_strided_COMPLEX64_t[::self.stride_factor])
        for i in xrange(self.size):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_1_2.matvec_htransp(self.x_COMPLEX128_t)
        csr_y = self.l_1_2_csr.matvec_htransp(self.x_strided_COMPLEX128_t[::self.stride_factor])
        for i in xrange(self.size):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_1_3.matvec_htransp(self.x_COMPLEX256_t)
        csr_y = self.l_1_3_csr.matvec_htransp(self.x_strided_COMPLEX256_t[::self.stride_factor])
        for i in xrange(self.size):
            self.failUnless(l_y[i] == csr_y[i])
  

  
  
        l_y = self.l_2_1.matvec_htransp(self.x_COMPLEX64_t)
        csr_y = self.l_2_1_csr.matvec_htransp(self.x_strided_COMPLEX64_t[::self.stride_factor])
        for i in xrange(self.size):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_2_2.matvec_htransp(self.x_COMPLEX128_t)
        csr_y = self.l_2_2_csr.matvec_htransp(self.x_strided_COMPLEX128_t[::self.stride_factor])
        for i in xrange(self.size):
            self.failUnless(l_y[i] == csr_y[i])
  
        l_y = self.l_2_3.matvec_htransp(self.x_COMPLEX256_t)
        csr_y = self.l_2_3_csr.matvec_htransp(self.x_strided_COMPLEX256_t[::self.stride_factor])
        for i in xrange(self.size):
            self.failUnless(l_y[i] == csr_y[i])
  


if __name__ == '__main__':
    unittest.main()