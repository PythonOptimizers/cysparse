"""
This file compares different implementations of ``delete_row_with_mask``.

We compare the libraries:

- :program:`PySparse` and
- :program:`CySparse`.


"""

# TODO: find a way to recreate the matrix OUTSIDE the tests!!!
# benchmark doesn't allow this as it calls eachSetup **every** time before any test...

import benchmark
import numpy as np
import sys

# CySparse
from cysparse.sparse.ll_mat import LLSparseMatrix
from cysparse.common_types.cysparse_types import INT32_T, INT64_T, FLOAT64_T

# PySparse
from pysparse.sparse import spmatrix


########################################################################################################################
# Helpers
########################################################################################################################
def construct_sparse_matrix(A, n, nbr_elements):
    for i in xrange(nbr_elements):
        A[i % n, (2 * i + 1) % n] = i / 3


########################################################################################################################
# Benchmark
########################################################################################################################
class LLMatDeleteRowsBenchmark(benchmark.Benchmark):


    label = "Simple delete_rows with 100 elements, size = 1,000 and 100 row to delete"
    each = 2

    def setUp(self):


        self.nbr_elements = 100
        self.size = 1000
        self.nbr_of_rows_to_delete = 100

        assert self.size > self.nbr_of_rows_to_delete

        self.mask_c = np.ones(self.size, dtype=np.int8)
        self.mask_p = np.ones(self.size, 'l')


        self.mask_c[0:self.nbr_of_rows_to_delete] = 0
        self.mask_p[0:self.nbr_of_rows_to_delete] = 0



    #def tearDown(self):

    #    for i in xrange(self.size - self.nbr_of_rows_to_delete):
    #        for j in xrange(self.size):
    #            assert self.A_c[i,j] == self.A_p[i,j]

    def test_pysparse(self):
        self.A_p = spmatrix.ll_mat(self.size, self.size, self.nbr_elements)
        construct_sparse_matrix(self.A_p, self.size, self.nbr_elements)

        self.A_p.delete_rows(self.mask_p)

        return

    def test_cysparse(self):
        self.A_c = LLSparseMatrix(size=self.size, size_hint=self.nbr_elements, dtype=FLOAT64_T)
        construct_sparse_matrix(self.A_c, self.size, self.nbr_elements)

        self.A_c.delete_rows_with_mask(self.mask_c)
        return


class LLMatDeleteRowsBenchmark_1(LLMatDeleteRowsBenchmark):


    label = "Simple delete_rows with 1,000 elements, size = 10,000 and 1,000 row to delete"
    each = 2

    def setUp(self):


        self.nbr_elements = 1000
        self.size = 10000
        self.nbr_of_rows_to_delete = 1000

        assert self.size > self.nbr_of_rows_to_delete

        self.mask_c = np.ones(self.size, dtype=np.int8)
        self.mask_p = np.ones(self.size, 'l')


        self.mask_c[0:self.nbr_of_rows_to_delete] = 0
        self.mask_p[0:self.nbr_of_rows_to_delete] = 0


class LLMatDeleteRowsBenchmark_2(LLMatDeleteRowsBenchmark):


    label = "Simple delete_rows with 10,000 elements, size = 100,000 and 10,000 row to delete"
    each = 2

    def setUp(self):


        self.nbr_elements = 10000
        self.size = 100000
        self.nbr_of_rows_to_delete = 10000

        assert self.size > self.nbr_of_rows_to_delete

        self.mask_c = np.ones(self.size, dtype=np.int8)
        self.mask_p = np.ones(self.size, 'l')


        self.mask_c[0:self.nbr_of_rows_to_delete] = 0
        self.mask_p[0:self.nbr_of_rows_to_delete] = 0


class LLMatDeleteRowsBenchmark_3(LLMatDeleteRowsBenchmark):


    label = "Simple delete_rows with 80,000 elements, size = 100,000 and 50,000 row to delete"
    each = 2

    def setUp(self):


        self.nbr_elements = 80000
        self.size = 100000
        self.nbr_of_rows_to_delete = 50000

        assert self.size > self.nbr_of_rows_to_delete

        self.mask_c = np.ones(self.size, dtype=np.int8)
        self.mask_p = np.ones(self.size, 'l')


        self.mask_c[0:self.nbr_of_rows_to_delete] = 0
        self.mask_p[0:self.nbr_of_rows_to_delete] = 0



if __name__ == '__main__':
    benchmark.main(format="markdown", numberFormat="%.4g")