..  cysparse_for_library_mainteners:

==========================================
:program:`CySparse` for library mainteners
==========================================

Meta-programming aka code generation
=====================================

We choose to generate some code by automatic generation. :program:`Python`, :program:`Cython` or :program:`C` are quite limited
when it comes to use generic types. Because we want to write this library in :program:`Cython`, we decided to generate automatically 
different files for different types used.

Types
------

Generic types
^^^^^^^^^^^^^^^

We use the following generic types:

- ``INT32_t``
- ``UINT32_t``
- ``INT64_t``
- ``UINT64_t``
- ``FLOAT32_t``
- ``FLOAT64_t``
- ``COMPLEX64_t``
- ``COMPLEX128_t``

These types can be defined (``ctypedef``\ed) as any buildin or custom types (like a :program:`numpy` type or a custom ``struct`` or even a custom :program:`C++` class).
See the files :file:`xxx_types_xxx.pxd` in the directory :file:`cysparse/types` for some examples.

The names are quite explicit and we suppose that the real types used reflect that, i.e. an ``INT32_t`` has a smaller (or equal) size than a ``INT64_t``. We don't impose any other restriction
and while the numbers are explicit you shouldn't expect that that exact amount of bits are used.


The ``COMPLEX`` type
^^^^^^^^^^^^^^^^^^^^

The complex type needs some special attention. Whatever the ``class`` or ``struct`` used to define a complex, it **must** contain two fields (or attributes):

- ``real``
- ``imag``

that should be publicly accessible like this:

..  code-block:: cython

    COMPLEX128_t z
    z.real = ...
    z.imag = ...
    
Both fields **must** be of the exact same type. :program:`Python` offers such a ``struct`` but :program:`Cython` and :program:`C++` don't. Their versions of complex is a little bit different and even though it shares some similarities, you **cannot** access the fields ``real`` and ``imag`` directly. These types are thus **not** compatible with our implementation. We have defined our own complex type. See XXX.


Add (or remove) a new type
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Automatic
------------

**All** generated files can be generated by invoking a **single** script: 

..  code-block:: bash

    python generate_code.py

Conventions
-----------

To keep the generation of code source files as simple as possible, we follow some conventions. This list of conventions is **strict**: if you depart from these conventions, the code will **not** compile.

- **Don't** use fused types: this feature is too **experimental**.
- Template files have the following extensions:
    
  ============================= ============================= ==================================
  :program:`Cython`             :program:`CySparse` template  File type
  ============================= ============================= ==================================
  ``.pxd``                      ``.cpd``                      Definition files.
  ``.pyx``                      ``.cpx``                      Implementation files.
  ``.pxi``                      ``.cpi``                      Text files to insert verbatim.
  ============================= ============================= ==================================

- Any *template* directory must **only** contain the template files and the generated files. This is because
  all files with the right extension are considered as templates and all the other files are considered as generated 
  (and can be thus automatically erased). This clear distinction allows also to have a strict separation between 
  automatically generated files and the rest of the code.
- Index types are replaced whenever the variable ``@index@`` is encountered, Element types are replaced whenever the variable ``@type@`` is encountered.
- Generated **file names**:

  - for a file ``my_file.cpx`` where we only replace an index type ``INT32_t``: ``my_file_INT32_t.pyx``;
  - for a file ``my_file.cpx`` where we replace an index type ``INT32_t`` **and** an elment type ``FLOAT64_t``: ``my_file_INT32_t_FLOAT_t.pyx``.
    
- Generated **class/method/function names**:



    
