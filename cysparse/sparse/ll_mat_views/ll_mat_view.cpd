from cysparse.common_types.cysparse_types cimport *

# forward declaration
cdef class LLSparseMatrixView_@index@_@type@

from cysparse.sparse.ll_mat_matrices.ll_mat_@index@_@type@ cimport LLSparseMatrix_@index@_@type@

from cpython cimport PyObject

cpdef bint PyLLSparseMatrixView_Check(object obj)

cdef class LLSparseMatrixView_@index@_@type@:
    cdef:
        @index@ __nrow    # number of rows of the collected view
        @index@ __ncol    # number of columns of the collected view

        bint __is_empty   # view is empty, probably constructed with bad index objects

        str __full_type_str   # Name of matrix view type
        str __base_type_str   # Type of matrix view

        @index@ * row_indices  # collected row indices
        @index@ * col_indices  # collected col indices

        LLSparseMatrix_@index@_@type@ A


    ####################################################################################################################
    # SET/GET
    ####################################################################################################################
    cdef put(self, @index@ i, @index@ j, @type@ value)
    cdef int safe_put(self, @index@ i, @index@ j, @type@ value)  except -1
    #cdef assign(self, LLSparseMatrixView view, obj)

    cdef @type@ at(self, @index@ i, @index@ j)
    # EXPLICIT TYPE TESTS
{% if type in complex_list %}
    # this is needed as for the complex type, Cython's compiler crashes...
    cdef @type@ safe_at(self, @index@ i, @index@ j) except *
{% else %}
    cdef @type@ safe_at(self, @index@ i, @index@ j) except? 1
{% endif %}

cdef LLSparseMatrixView_@index@_@type@ MakeLLSparseMatrixView_@index@_@type@(LLSparseMatrix_@index@_@type@ A, PyObject* obj1, PyObject* obj2)

cdef LLSparseMatrixView_@index@_@type@ MakeLLSparseMatrixViewFromView_@index@_@type@(LLSparseMatrixView_@index@_@type@ A, PyObject* obj1, PyObject* obj2)


