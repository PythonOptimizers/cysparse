@cython_compiler_directives@
"""
Some pure C functions to deal with index objects.

Index objects are Python objects that collect *indices* corresponding to row and column indices of a matrix.

Current index objects:

- integers (1-index);
- slices;
- numpy one dimensional arrays;
- lists;

Indices can be given in **any** order or **repeated**.

Numpy arrays can be strided or not.
"""
@cython_compiler_directives@
from cysparse.common_types.cysparse_types cimport *
from cpython.mem cimport PyMem_Malloc, PyMem_Realloc, PyMem_Free

cimport numpy as cnp
import numpy as np

cdef extern from "Python.h":
    # *** Types ***
    Py_ssize_t PY_SSIZE_T_MAX
    int PyInt_Check(PyObject *o)
    long PyInt_AS_LONG(PyObject *io)

    # *** Slices ***
    ctypedef struct PySliceObject:
        pass

    # Cython's version doesn't work for all versions...
    int PySlice_GetIndicesEx(
        PySliceObject* s, Py_ssize_t length,
        Py_ssize_t *start, Py_ssize_t *stop, Py_ssize_t *step,
        Py_ssize_t *slicelength) except -1

    int PySlice_Check(PyObject *ob)

    # *** List ***
    int PyList_Check(PyObject *p)
    PyObject* PyList_GetItem(PyObject *list, Py_ssize_t index)
    Py_ssize_t PyList_Size(PyObject *list)

cdef extern from "numpy/arrayobject.h":
    int PyArray_Check(PyObject * ob)
    ctypedef struct PyArrayObject:
        pass
    int PyArray_NDIM(PyArrayObject *arr)
    cnp.npy_intp PyArray_DIM(PyArrayObject* arr, int n)
    void *PyArray_DATA(PyArrayObject *arr)

    # TODO: check type of elements inside an numpy array...
    ctypedef struct PyArray_Descr:
        char type
        int type_num
        char kind
    PyArray_Descr *PyArray_DTYPE(PyArrayObject* arr)


cdef @index@ * create_c_array_indices_from_python_object_@index@(@index@ max_length, PyObject * obj, @index@ * number_of_elements) except NULL:
    """
    Creates and returns a C-array with the indices corresponding to an index object.

    Args:
        max_length: Bound on the indices that can not be crossed. Indices must be **strictly** smaller than ``max_length``.
            Consider this as ``A.nrow`` or ``A.ncol``.
        obj: A Python object. Should be an integer, a slice, a list or a numpy array.
        number_of_elements: Number of elements returned in the C-array of indices. This is an OUT argument.

    Returns:
        A C-array with the corresponding indices of length ``number_of_elements``.

    Warning:
        There are not many tests about the indices given in a list or a numpy array.

        We do test:
            * if indices are out of bound, i.e. 0 <= index < max_length

        We do not test:
            * their relative order;
            * their uniqueness.

        We partially test:
            * if elements inside the index objects are integers: this is done for list but **not** (yet) for numpy arrays.
    """
    # TODO: test for strides in numpy arrays!!!
    cdef @index@ ret
    cdef Py_ssize_t start, stop, step, length, index

    cdef @index@ i, j
    cdef @index@ * indices
    cdef PyObject *val

    cdef INT32_t array_dim
    cdef @index@ * array_data
    cdef PyArray_Descr * py_array_descr

    ####################################################################################################################
    #  CASES
    ####################################################################################################################
    #                                            *** Integer ***
    if PyInt_Check(obj):
        i = PyInt_AS_LONG(obj)
        # test if index is valid
        if not (0 <= i < max_length):
            raise IndexError("Index %d out of bounds [%d, %d[" % (i, 0, max_length))

        length = 1
        indices = <@index@ *> PyMem_Malloc(length * sizeof(@index@))
        if not indices:
            raise MemoryError()

        indices[0] = <@index@> i

    #                                            *** Slice ***
    elif PySlice_Check(obj):
        # slice
        ret = PySlice_GetIndicesEx(<PySliceObject*>obj, max_length, &start, &stop, &step, &length)
        if ret:
            raise RuntimeError("Slice could not be translated")

        #print "start, stop, step, length = (%d, %d, %d, %d)" % (start, stop, step, length)

        indices = <@index@ *> PyMem_Malloc(length * sizeof(@index@))
        if not indices:
            raise MemoryError()

        # populate indices
        i = start
        for j from 0 <= j < length:
            indices[j] = i
            i += step

    #                                            *** List ***
    elif PyList_Check(obj):
        length = PyList_Size(obj)
        indices = <@index@ *> PyMem_Malloc(length * sizeof(@index@))
        if not indices:
            raise MemoryError()

        for i from 0 <= i < length:
            val = PyList_GetItem(obj, <Py_ssize_t>i)
            if PyInt_Check(val):
                index = PyInt_AS_LONG(val)
                # test if index is valid
                if not (0 <= index < max_length):
                    raise IndexError("Index %d out of bounds [%d, %d[" % (<long>index, 0, max_length))
                indices[i] = <@index@> index
            else:
                PyMem_Free(indices)
                raise ValueError("List must only contain integers")

    #                                            *** numpy array ***
    elif PyArray_Check(obj):
        array_dim = <INT32_t> PyArray_NDIM(<PyArrayObject *>obj)
        if array_dim != 1:
            raise IndexError("Numpy array must have only one dimension")

        length = <Py_ssize_t> PyArray_DIM(<PyArrayObject *>obj, 0)

        indices = <@index@ *> PyMem_Malloc(length * sizeof(@index@))
        if not indices:
            raise MemoryError()

        # TODO: remove or control this is not DANGEROUS
        # This is dangerous if array is NOT C-contiguous!!!
        array_data = <@index@* > PyArray_DATA(<PyArrayObject *> obj)

        # test type of array elements
        # TODO: I don't know how to find out what the type of elements is!!!!
        #py_array_descr = PyArray_DTYPE(<PyArrayObject*> obj)

        #if py_array_descr.type_num != np.int:
        #    raise ValueError("Index object must contain integers")

        # we cannot matrix_copy the C-array directly as we must test each element
        for i from 0 <= i < length:
            index = <@index@> array_data[i]
            if not (0 <= index < max_length):
                raise IndexError("Index %d out of bounds [%d, %d[" % (index, 0, max_length))
            indices[i] = array_data[i]

    else:
        raise TypeError("Index object is not recognized to create a LLSparseMatrixView")

    number_of_elements[0] = <@index@> length

    return indices