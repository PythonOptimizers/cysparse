@cython_compiler_directives@

from cysparse.common_types.cysparse_types cimport *

from cysparse.sparse.s_mat_matrices.s_mat_@index@_@type@ cimport MutableSparseMatrix_@index@_@type@
# TODO: investigate: how come this could even compile before?
#from cysparse.sparse.ll_mat_matrices.ll_mat_@index@_@type@ cimport LLSparseMatrix_@index@_@type@
from cysparse.sparse.ll_mat_views.ll_mat_view_@index@_@type@ cimport LLSparseMatrixView_@index@_@type@

cimport numpy as cnp

from cpython cimport PyObject

cdef class LLSparseMatrix_@index@_@type@(MutableSparseMatrix_@index@_@type@):
    """
    Linked-List Format matrix.

    Note:
        The linked list is made of two C-arrays (``link`` and ``root``).
    """
    ####################################################################################################################
    # Init/Free/Memory
    ####################################################################################################################
    cdef:
        @index@  free      # index to first element in free chain
        @type@  *val       # pointer to array of values
        @index@ *col       # pointer to array of indices, see doc
        @index@ *link      # pointer to array of indices, see doc
        @index@ *root      # pointer to array of indices, see doc

    cdef _realloc(self, @index@ nalloc_new)
    cdef _realloc_expand(self)

    ####################################################################################################################
    # SORTING
    ####################################################################################################################
    cdef bint is_sorted(self)

    ####################################################################################################################
    # CREATE SUB-MATRICES
    ####################################################################################################################
    # TODO: implement method or scrap it
    cdef create_submatrix(self, PyObject* obj1, PyObject* obj2)

    ####################################################################################################################
    # COUNTING ELEMENTS
    ####################################################################################################################
    cdef @index@ count_nnz_from_indices(self, @index@ * row_indices,@index@ row_indices_length, @index@ * col_indices,
                                        @index@ col_indices_length, bint count_only_stored=?)

    ####################################################################################################################
    # SET/GET
    ####################################################################################################################
    cdef put(self, @index@ i, @index@ j, @type@ value)
    cdef safe_put(self, @index@ i, @index@ j, @type@ value)
    # EXPLICIT TYPE TESTS
    cdef assign(self, LLSparseMatrixView_@index@_@type@ view, obj)

    # EXPLICIT TYPE TESTS
    cdef @type@ at(self, @index@ i, @index@ j)
{% if type in complex_list %}
    # this is needed as for the complex type, Cython's compiler crashes...
    cdef @type@ safe_at(self, @index@ i, @index@ j) except *
{% else %}
    cdef @type@ safe_at(self, @index@ i, @index@ j) except? 2
{% endif %}
    cpdef object keys(self)
    cpdef object values(self)
    cpdef object items(self)

    cdef fill_triplet(self, @index@ * a_row, @index@ * a_col, @type@ * a_val)

    cpdef take_triplet(self, id1, id2, cnp.ndarray[cnp.@type|cysparse_type_to_numpy_c_type@, ndim=1] b)
    cpdef put_diagonal(self, @index@ k, cnp.ndarray[cnp.@type|cysparse_type_to_numpy_c_type@, ndim=1] b)

    ####################################################################################################################
    # Norms
    ####################################################################################################################
    cdef _norm_inf(self)
    cdef _norm_one(self)
    cdef _norm_frob(self)

#cdef @index@ * create_c_array_indices_from_python_object_@index@(@index@ max_length, PyObject * obj, @index@ * number_of_elements) except NULL

cdef MakeLLSparseMatrix_@index@_@type@(@index@ nrow,
                                        @index@ ncol,
                                        @index@ nnz,
                                        @index@ free,
                                        @index@ nalloc,
                                        @index@ * root,
                                        @index@ * col,
                                        @index@ * link,
                                        @type@ * val,
                                        bint store_symmetric,
                                        bint store_zero)