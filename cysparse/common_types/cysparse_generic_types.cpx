########################################################################################################################
#
# Several helpers that deal with generic types.
#
########################################################################################################################

"""
Several generic functions on types.
"""
from cysparse.common_types.cysparse_types cimport *
from cysparse.common_types.cysparse_types import *

cdef extern from "complex.h":
    float crealf(float complex z)
    float cimagf(float complex z)

    double creal(double complex z)
    double cimag(double complex z)

    long double creall(long double complex z)
    long double cimagl(long double complex z)

    double cabs(double complex z)
    float cabsf(float complex z)
    long double cabsl(long double complex z)

    double complex conj(double complex z)
    float complex  conjf (float complex z)
    long double complex conjl (long double complex z)

########################################################################################################################
# Split/join complex values
########################################################################################################################
# EXPLICIT TYPE TESTS
{% for index_name in index_list %}
{% for type_name in complex_list %}
cdef split_array_complex_values_kernel_@index_name@_@type_name@(@type_name@ * val, @index@ val_length,
                                            @type_name|cysparse_real_type_from_real_cysparse_complex_type@ * rval, @index_name@ rval_length,
                                            @type_name|cysparse_real_type_from_real_cysparse_complex_type@ * ival, @index_name@ ival_length):

    if val_length > rval_length or val_length > ival_length:
        raise IndexError('Real and Imaginary values arrays must be of size equal or bigger as Complex array')

    cdef:
        @index_name@ i
        @type_name@ v

    for i from 0 <= i < val_length:
        v = val[i]
    {% if type_name == 'COMPLEX64_t' %}
        rval[i] = crealf(v)
        ival[i] = cimagf(v)
    {% elif type_name == 'COMPLEX128_t' %}
        rval[i] = creal(v)
        ival[i] = cimag(v)
    {% elif type_name == 'COMPLEX256_t' %}
        rval[i] = creall(v)
        ival[i] = cimagl(v)
    {% else %}
YOU HAVE TO CAST YOUR COMPLEX TYPE HERE
    {% endif %}
{% endfor %}
{% endfor %}



{% for type_name in complex_list %}
cdef @type_name@ make_complex_from_real_parts_@type_name@(@type_name|cysparse_real_type_from_real_cysparse_complex_type@ real,
                                              @type_name|cysparse_real_type_from_real_cysparse_complex_type@ imag):
    return <@type_name@> real + imag * 1j
{% endfor %}


{% for index_name in index_list %}
{% for type_name in complex_list %}
cdef join_array_complex_values_kernel_@index_name@_@type_name@(
                                            @type_name|cysparse_real_type_from_real_cysparse_complex_type@ * rval, @index_name@ rval_length,
                                            @type_name|cysparse_real_type_from_real_cysparse_complex_type@ * ival, @index_name@ ival_length,
                                            @type_name@ * val, @index@ val_length):

    if val_length > rval_length or val_length > ival_length:
        raise IndexError('Real and Imaginary values arrays must be of size equal or bigger as Complex array')

    cdef:
        @index_name@ i
        @type_name@ v

    for i from 0 <= i < val_length:
        val[i] = make_complex_from_real_parts_@type_name@(rval[i], ival[i])
{% endfor %}
{% endfor %}