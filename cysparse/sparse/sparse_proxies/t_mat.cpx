# TODO: verify if we need to generate this file
# For the moment I (Nikolaj) 'm leaving it as it is just in case things change...

from cysparse.common_types.cysparse_types import *
from cysparse.sparse.s_mat cimport SparseMatrix, MakeMatrixLikeString
#from cysparse.sparse.sparse_proxies cimport ProxySparseMatrix

from cysparse.common_types.cysparse_numpy_types import are_mixed_types_compatible, cysparse_to_numpy_type
from cysparse.sparse.s_mat cimport PyLLSparseMatrix_Check

from cysparse.sparse.operator_proxies.mul_proxy import MulProxy
from cysparse.sparse.operator_proxies.sum_proxy import SumProxy

cimport numpy as cnp

cnp.import_array()

from python_ref cimport Py_INCREF, Py_DECREF, PyObject
cdef extern from "Python.h":
    # *** Types ***
    int PyInt_Check(PyObject *o)


cdef class TransposedSparseMatrix:
    """
    Proxy to the transposed matrix of a :class:`SparseMatrix`.

    """
    ####################################################################################################################
    # Init and properties
    ####################################################################################################################
    ####################################################################################################################
    # Common code from p_mat.pyx See #113: I could not solve the circular dependencies...
    ####################################################################################################################
    def __cinit__(self, SparseMatrix A):
        self.A = A
        Py_INCREF(self.A)  # increase ref to object to avoid the user deleting it explicitly or implicitly

    def get_matrix(self):
        """
        Return pointer to original matrix ``A``.
        """
        return self.A

    {% raw %}
    @property
    {%- endraw %}
    def nrow(self):
        return self.A.ncol

    {% raw %}
    @property
    {%- endraw %}
    def ncol(self):
        return self.A.nrow

    {% raw %}
    @property
    {%- endraw %}
    def nnz(self):
        return self.A.nnz

    {% raw %}
    @property
    {%- endraw %}
    def dtype(self):
        return self.A.cp_type.dtype

    {% raw %}
    @property
    {%- endraw %}
    def itype(self):
        return self.A.cp_type.itype

    {% raw %}
    @property
    {%- endraw %}
    def is_symmetric(self):
        return self.A.is_symmetric

    {% raw %}
    @property
    {%- endraw %}
    def store_symmetric(self):
        return self.A.store_symmetric

    {% raw %}
    @property
    {%- endraw %}
    def store_zero(self):
        return self.A.store_zero

    {% raw %}
    @property
    {%- endraw %}
    def is_mutable(self):
        return self.A.__is_mutable

    {% raw %}
    @property
    {%- endraw %}
    def base_type_str(self):
        return 'Transposed of ' + self.A.base_type_str

    {% raw %}
    @property
    {%- endraw %}
    def full_type_str(self):
        return 'Tranposed of ' + self.A.full_type_str

    {% raw %}
    @property
    {%- endraw %}
    def itype_str(self):
        return self.A.itype_str

    {% raw %}
    @property
    {%- endraw %}
    def dtype_str(self):
        return self.A.dtype_str

    {% raw %}
    @property
    {%- endraw %}
    def nargin(self):
        return self.A.nargout

    {% raw %}
    @property
    {%- endraw %}
    def nargout(self):
        return self.A.nargin

    # for compatibility with numpy, PyKrylov, etc
    {% raw %}
    @property
    {%- endraw %}
    def shape(self):
        return (self.nrow, self.ncol)

    def __dealloc__(self):
        Py_DECREF(self.A) # release ref

    ####################################################################################################################
    # End of Common code
    ####################################################################################################################
    {% raw %}
    @property
    {%- endraw %}
    def T(self):
        return self.A

    {% raw %}
    @property
    {%- endraw %}
    def H(self):
        return self.A.conj

    {% raw %}
    @property
    {%- endraw %}
    def conj(self):
        return self.A.H

    ####################################################################################################################
    # Set/get
    ####################################################################################################################
    def __getitem__(self, tuple key):
        if len(key) != 2:
            raise IndexError('Index tuple must be of length 2 (not %d)' % len(key))

        if not PyInt_Check(<PyObject *>key[0]) or not PyInt_Check(<PyObject *>key[1]):
            raise IndexError("Only integers are accepted as indices for a transposed matrix")

        return self.A[key[1], key[0]]

    ####################################################################################################################
    # Basic operations
    ####################################################################################################################
    def __mul__(self, B):
        if cnp.PyArray_Check(B) and B.ndim == 1:
            return self.matvec(B)

        return MulProxy(self, B)

    def __add__(self, B):
        """
        Return a :class:`SumProxy`.

        Returns:
            A :class:`SumProxy`, i.e. a proxy to a matrix-like sum.

        """
        return SumProxy(self, B)

    def __sub__(self, B):
        """
        Return a :class:`SumProxy`.

        Returns:
            A :class:`SumProxy`, i.e. a proxy to a matrix-like sum.

        """
        return SumProxy(self, B, real_sum=False)

    def matdot(self, B):
        return self.A.matdot_transp(B)

    def matdot_transp(self, B):
        return self.A.matdot(B)

    def matvec(self, B):
        return self.A.matvec_transp(B)

    def matvec_transp(self, B):
        return self.A.matvec(B)

    def matvec_htransp(self, B):
        return self.A.matvec_conj(B)

    def matvec_conj(self, B):
        return self.A.matvec_htransp(B)

    def copy(self):
        raise NotImplementedError('This proxy is unique')

    def matrix_copy(self):
        return self.A.create_transpose()

    ####################################################################################################################
    # String representations
    ####################################################################################################################
    def __repr__(self):
        """
        Return an unique representation of the :class:`TransposedSparseMatrix` object.

        """
        return "Proxy to the transposed (.T) of %s" % self.A.__repr__()

    def _matrix_description_before_printing(self):
        return "Proxy to the transposed (.T) of %s" % self.A._matrix_description_before_printing()

    def at_to_string(self, i, j, int cell_width=10):
        return self.A.at_to_string(j, i, cell_width)

    def __str__(self):
        """
        Return a string to print the :class:`SparseMatrix` object to screen.

        """
        s = self._matrix_description_before_printing()
        s += '\n'
        s += MakeMatrixLikeString(self)

        return s